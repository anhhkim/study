{"ast":null,"code":"import { randomizer, shuffle } from \"./common\";\nimport { get1DigitChoices } from \"./math1Digit\";\nexport function create2DigitsSubList() {\n  const list = [];\n  for (let i = 11; i <= 100; i++) {\n    for (let j = 0; j <= i / 10; j++) {\n      for (let k = 0; k <= i % 10; k++) {\n        const num2 = j * 10 + k;\n        if (num2 === 0) {\n          continue;\n        }\n        const num3 = i - num2;\n        list.push({\n          num1: i,\n          num2,\n          num3,\n          ops: \"-\",\n          ...get2DigitsCommonProblem([i, num2, num3])\n        });\n      }\n    }\n  }\n  return list;\n}\nexport function create2DigitsAddList() {\n  const list = [];\n  for (let i = 11; i <= 100; i++) {\n    for (let j = 0; j <= (100 - i) / 10; j++) {\n      for (let k = 0; k < 10 - i % 10; k++) {\n        const num2 = j * 10 + k;\n        const num3 = i + num2;\n        if (num2 === 0 || num3 > 100) {\n          continue;\n        }\n        list.push({\n          ...get2DigitsCommonProblem([i, num2, num3]),\n          num1: i,\n          num2,\n          num3,\n          ops: \"+\"\n        });\n      }\n    }\n  }\n  return list;\n}\nexport function get2DigitsChoices(answer) {\n  if (answer <= 10) {\n    return get1DigitChoices(answer);\n  }\n  const choices = [];\n  for (let i = 0; i <= 5; i++) {\n    if (answer - i > 0) {\n      choices.push(answer - i);\n    }\n    if (answer - i * 10 > 0) {\n      choices.push(answer - i * 10);\n    }\n    if (answer + i <= 100) {\n      choices.push(answer + i);\n    }\n    if (answer + i * 10 <= 0) {\n      choices.push(answer + i * 10);\n    }\n  }\n  return shuffle([...shuffle(choices).slice(0, 3), answer]);\n}\nexport function get2DigitsCommonProblem(arr) {\n  const question = randomizer(0, arr.length - 1);\n  const answer = arr[question];\n  return {\n    question,\n    answer,\n    choices: get2DigitsChoices(answer),\n    equalRight: randomizer(0, 1) === 1\n  };\n}","map":{"version":3,"names":["randomizer","shuffle","get1DigitChoices","create2DigitsSubList","list","i","j","k","num2","num3","push","num1","ops","get2DigitsCommonProblem","create2DigitsAddList","get2DigitsChoices","answer","choices","slice","arr","question","length","equalRight"],"sources":["/Users/kim.anh/Desktop/mimi/study/src/app/common/math2Digits.ts"],"sourcesContent":["import { randomizer, shuffle } from \"./common\";\nimport { get1DigitChoices } from \"./math1Digit\";\n\nexport function create2DigitsSubList() {\n    const list = [];\n  \n    for (let i = 11; i <= 100; i++) {\n      for (let j = 0; j <= i/10; j++) {\n        for (let k = 0; k <= i % 10; k++) {\n          const num2 = j*10 + k;\n          if (num2 === 0) {\n            continue\n          }\n          const num3 = i - num2;\n        \n          list.push({\n            num1: i,\n            num2,\n            num3,\n            ops: \"-\",\n            ...get2DigitsCommonProblem([i, num2, num3]),\n          });\n        }\n      }\n    }\n  \n    return list;\n}\n  \nexport function create2DigitsAddList() {\n    const list = [];\n  \n    for (let i = 11; i <= 100; i++) {\n      for (let j = 0; j <= (100-i)/10; j++) {\n        for (let k = 0; k < 10-(i%10); k++) {\n          const num2 = j*10 + k;\n          const num3 = i + num2;\n          if (num2 === 0 || num3 > 100) {\n            continue\n          }\n\n          list.push({\n            ...get2DigitsCommonProblem([i, num2, num3]),\n            num1: i,\n            num2,\n            num3,\n            ops: \"+\",\n\n          });\n        }\n      }\n    }\n  \n    return list;\n}\n  \nexport function get2DigitsChoices(answer: number): number[] {\n  if (answer <= 10) {\n    return get1DigitChoices(answer);\n  }\n\n  const choices: number[] = [];\n  for (let i = 0; i <= 5; i++) {\n    if (answer - i > 0) {\n      choices.push(answer-i);\n    }\n    if (answer - (i*10) > 0) {\n      choices.push(answer-(i*10));\n    }\n\n    if (answer + i <= 100) {\n      choices.push(answer+i);\n    }\n    if (answer + (i*10) <= 0) {\n      choices.push(answer+(i*10));\n    }\n  }\n  return shuffle([...shuffle(choices).slice(0, 3), answer]);\n}\n\nexport function get2DigitsCommonProblem(arr: number[]) {\n  const question = randomizer(0, arr.length - 1);\n  const answer = arr[question];\n  return {\n      question,\n      answer,\n      choices: get2DigitsChoices(answer),\n      equalRight: randomizer(0, 1) === 1,\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}